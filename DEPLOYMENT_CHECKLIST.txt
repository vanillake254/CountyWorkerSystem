╔═══════════════════════════════════════════════════════════════════════════╗
║                   COUNTY WORKER PLATFORM                                  ║
║                   DEPLOYMENT CHECKLIST                                    ║
║                                                                           ║
║              Powered by VANILLA SOFTWARES                                 ║
╚═══════════════════════════════════════════════════════════════════════════╝

📋 PRE-DEPLOYMENT SETUP
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

□ Create Railway account (https://railway.app)
□ Create Firebase account (https://console.firebase.google.com)
□ Install Railway CLI: npm install -g @railway/cli
□ Install Firebase CLI: npm install -g firebase-tools
□ Generate SECRET_KEY: python3 -c "import secrets; print(secrets.token_hex(32))"
□ Generate JWT_SECRET_KEY: python3 -c "import secrets; print(secrets.token_hex(32))"


🚂 RAILWAY BACKEND DEPLOYMENT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

STEP 1: Create Project
□ Go to railway.app
□ Click "New Project"
□ Select "Deploy from GitHub repo" OR "Empty Project"

STEP 2: Add PostgreSQL Database
□ Click "+ New" in your project
□ Select "Database" → "PostgreSQL"
□ Wait for database to provision
□ Copy DATABASE_URL from Variables tab

STEP 3: Deploy Backend
Option A - From GitHub:
  □ Connect GitHub repository
  □ Select backend folder as root
  □ Railway auto-deploys

Option B - From CLI:
  □ cd backend
  □ railway login
  □ railway init
  □ railway link (select your project)
  □ railway up

STEP 4: Set Environment Variables
□ Go to backend service → Variables tab
□ Add: FLASK_ENV=production
□ Add: SECRET_KEY=<your-generated-key>
□ Add: JWT_SECRET_KEY=<your-generated-key>
□ DATABASE_URL and PORT are auto-set

STEP 5: Generate Domain
□ Go to Settings → Networking
□ Click "Generate Domain"
□ Copy URL: https://your-app.railway.app
□ Save this URL for frontend configuration

STEP 6: Initialize Database
□ railway run flask db init
□ railway run flask db migrate -m "Initial migration"
□ railway run flask db upgrade
□ railway run python3 seed.py

STEP 7: Test Backend
□ Visit: https://your-app.railway.app/health
□ Should return: {"status": "healthy", "database": "connected"}


🔥 FIREBASE FRONTEND DEPLOYMENT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

STEP 1: Update API URL
□ Open: frontend/lib/services/api_service.dart
□ Change baseUrl to: 'https://your-app.railway.app'
□ Save file

STEP 2: Create Firebase Project
□ Go to console.firebase.google.com
□ Click "Add project"
□ Name: county-worker-platform
□ Disable Analytics (optional)
□ Click "Create project"

STEP 3: Initialize Firebase
□ cd frontend
□ firebase login
□ firebase init hosting
□ Select "Use an existing project"
□ Choose: county-worker-platform
□ Public directory: build/web
□ Single-page app: Yes
□ Automatic builds: No
□ Overwrite index.html: No

STEP 4: Build Flutter App
□ flutter clean
□ flutter pub get
□ flutter build web --release
□ Check build/web folder exists

STEP 5: Deploy to Firebase
□ firebase deploy --only hosting
□ Wait for deployment to complete
□ Copy Hosting URL: https://county-worker-platform.web.app

STEP 6: Test Frontend
□ Visit: https://county-worker-platform.web.app
□ Should load login screen
□ Try logging in with test credentials


🔄 POST-DEPLOYMENT CONFIGURATION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

STEP 1: Update CORS Settings
□ Open: backend/app.py
□ Update CORS origins to include Firebase URLs:
  - https://county-worker-platform.web.app
  - https://county-worker-platform.firebaseapp.com
  - http://localhost:8080 (for development)
□ Redeploy backend: railway up

STEP 2: Test Integration
□ Open frontend URL
□ Login as admin: hr@county.go.ke / password
□ Check browser console for errors
□ Test creating a job
□ Test applying for a job
□ Test all dashboards

STEP 3: Change Default Passwords
□ Login as admin
□ Go to Users tab
□ Update password for: hr@county.go.ke
□ Update password for: sup@county.go.ke
□ Update password for: worker@county.go.ke
□ Update password for: applicant@county.go.ke


✅ VERIFICATION CHECKLIST
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Backend Health:
□ Health endpoint returns 200 OK
□ Database connection successful
□ Environment variables set correctly
□ Domain generated and accessible

Frontend Functionality:
□ Login page loads correctly
□ Can login with test credentials
□ Admin dashboard displays
□ Supervisor dashboard displays
□ Worker dashboard displays
□ Applicant dashboard displays
□ VANILLA SOFTWARES branding visible
□ Logout confirmation works

API Integration:
□ Frontend can reach backend
□ No CORS errors in console
□ Token authentication works
□ Job applications work
□ Task management works
□ Department management works


📊 MONITORING SETUP
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Railway:
□ Check deployment logs: railway logs
□ Monitor CPU/Memory usage in dashboard
□ Set up alerts for errors
□ Enable automatic backups for PostgreSQL

Firebase:
□ Check hosting usage in console
□ Monitor bandwidth usage
□ Set up performance monitoring
□ Enable analytics (optional)


🔒 SECURITY CHECKLIST
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

□ All default passwords changed
□ Strong SECRET_KEY set
□ Strong JWT_SECRET_KEY set
□ CORS properly configured
□ HTTPS enabled (automatic)
□ Database backups configured
□ Environment variables secured
□ Debug mode disabled in production
□ Error logging enabled
□ 2FA enabled on Railway account
□ 2FA enabled on Firebase account


📝 DEPLOYMENT INFORMATION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Backend URL: _________________________________________________

Frontend URL: _________________________________________________

Database: PostgreSQL on Railway (automatic)

Deployment Date: _____________________________________________

Deployed By: Kelvin Barasa (vanillasoftwares@gmail.com)


🎉 DEPLOYMENT COMPLETE!
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Your County Worker Platform is now live and ready for use!

Next Steps:
1. Share URLs with users
2. Monitor application performance
3. Set up regular database backups
4. Create user documentation
5. Plan for scaling if needed


📞 SUPPORT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Developer: Kelvin Barasa
Email: vanillasoftwares@gmail.com
Website: https://vanillasoftwares.web.app

Powered by VANILLA SOFTWARES 🚀
